{"/home/travis/build/npmtest/node-npmtest-grunt-env/test.js":"/* istanbul instrument in package npmtest_grunt_env */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-env/lib.npmtest_grunt_env.js":"/* istanbul instrument in package npmtest_grunt_env */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_env = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_env = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-env/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-env && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_env */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_env\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_env.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_env.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_env.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_env.__dirname + '/lib.npmtest_grunt_env.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-env/node_modules/grunt-env/Gruntfile.js":"module.exports = function(grunt) {\n  'use strict';\n\n  process.env.TEST = 'test';\n\n  // Project configuration.\n  grunt.initConfig({\n    env: {\n      options: {\n        globalOption: 'foo'\n      },\n      testData: {\n        TEST: 'test',\n        data: 'bar'\n      },\n      testOptions: {\n        options: {\n          localOption: 'baz',\n          USER: 'fritz'\n        }\n      },\n      testDotEnv: {\n        src: ['.env', '.env.json', '.env.ini', '.env.yaml']\n      },\n      testEnvdir: {\n        src: ['.envdir/*'],\n        options: {\n          envdir: true\n        }\n      },\n      testDirectives: {\n        ADD_NEGATIVE: 'should not change',\n        PATHLIKE: 'foo:bar:baz',\n        UNSHIFTBASIC: 'bar',\n        UNSHIFTOBJECT: 'bar',\n        REPLACE: 'foo',\n\n        options: {\n          add: {\n            ADD_POSITIVE: 'should be this',\n            ADD_NEGATIVE: 'should not change to this'\n          },\n          replace: {\n            REPLACE: 'bar',\n            REPLACE_NEGATIVE: '',\n          },\n          push: {\n            PATHLIKE: {\n              value: 'qux',\n              delimiter: ':'\n            }\n          },\n          unshift: {\n            UNSHIFTBASIC: 'foo',\n            UNSHIFTOBJECT: {\n              value: 'foo'\n            }\n\n          }\n        }\n      },\n      testFunctions: {\n        DATA_FROM_FUNCTION: function() {\n          return process.env.DATA_FROM_FUNCTION || '123';\n        },\n        A_STRING: 'string'\n      }\n    },\n    clean: {\n      env: ['.env*']\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      task: ['tasks/**/*.js'],\n      Gruntfile: ['Gruntfile.js']\n    },\n    jscs: {\n      options: {\n        config: '.jscsrc'\n      },\n      src: ['tasks/**/*.js', 'lib/**/*.js', 'Gruntfile.js']\n    }\n  });\n\n  // Load local tasks.\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-jscs');\n\n  var assert = require('assert');\n\n  grunt.registerTask('testData', function() {\n    assert.equal(process.env.globalOption, 'foo', 'globalOption should be set');\n    assert.equal(process.env.data, 'bar', 'data should be set');\n    delete process.env.globalOption;\n    delete process.env.data;\n  });\n\n  grunt.registerTask('testOptions', function() {\n    assert.equal(process.env.globalOption, 'foo', 'globalOption should be set');\n    assert.equal(process.env.localOption, 'baz', 'localOption should be set');\n    delete process.env.globalOption;\n    delete process.env.localOption;\n  });\n\n  grunt.registerTask('testFunctions', function() {\n    assert.equal(process.env.DATA_FROM_FUNCTION, '123', 'should set from function');\n    assert.equal(process.env.A_STRING, 'string', 'should set from string');\n    delete process.env.DATA_FROM_FUNCTION;\n    delete process.env.A_STRING;\n  });\n\n  grunt.registerTask('testDirectives', function() {\n    assert.equal(process.env.ADD_NEGATIVE, 'should not change', 'add should not change existing env var');\n    assert.equal(process.env.ADD_POSITIVE, 'should be this', 'add should create new var if it does not exist');\n    assert.equal(process.env.PATHLIKE, 'foo:bar:baz:qux', 'extend should take delimiters into account');\n    assert.equal(process.env.UNSHIFTBASIC, 'foobar', 'should extend without specifying object');\n    assert.equal(process.env.UNSHIFTOBJECT, 'foobar', 'should extend while specifying object');\n    assert.equal(process.env.REPLACE, 'bar', 'replace should replace existing var');\n    delete process.env.ADD_NEGATIVE;\n    delete process.env.ADD_POSITIVE;\n    delete process.env.PATHLIKE;\n    delete process.env.UNSHIFTBASIC;\n    delete process.env.UNSHIFTOBJECT;\n    delete process.env.REPLACE;\n    delete process.env.globalOption;\n  });\n\n  grunt.registerTask('writeDotEnv', function() {\n    grunt.file.write('.env', 'dotEnvFileData=bar\\ndotEnvFileOption=baz');\n    var json = {\n      jsonValue: 'foo',\n      push: {\n        PATHLIKE: 'jsonPath'\n      }\n    };\n    grunt.file.write('.env.json', JSON.stringify(json, null, 2));\n    grunt.file.write('.env.ini', 'dotEnvIniFileData=bar.ini\\ndotEnvIniFileOption=baz.ini\\n');\n    grunt.file.write('.env.yaml', 'yamlValue: foo');\n  });\n\n  grunt.registerTask('testDotEnv', function() {\n    assert(!process.env.src, 'Should not include src');\n    assert.equal(process.env.jsonValue, 'foo', 'value from json env file should be set');\n    assert.equal(process.env.PATHLIKE, 'jsonPath', 'should process directives in json');\n    assert.equal(process.env.globalOption, 'foo', 'should still get global options');\n    assert.equal(process.env.dotEnvFileData, 'bar', 'dotEnvFileData should be set');\n    assert.equal(process.env.dotEnvFileOption, 'baz', 'dotEnvFileOption should be set');\n    assert.equal(process.env.dotEnvIniFileData, 'bar.ini', 'dotEnvIniFileData should be set');\n    assert.equal(process.env.dotEnvIniFileOption, 'baz.ini', 'ndotEnvIniFileOption should be set');\n    assert.equal(process.env.yamlValue, 'foo', 'yamlValue should be set');\n    delete process.env.jsonValue;\n    delete process.env.dotEnvFileData;\n    delete process.env.dotEnvFileOption;\n    delete process.env.PATHLIKE;\n    delete process.env.globalOption;\n    delete process.env.dotEnvIniFileData;\n    delete process.env.dotEnvIniFileOption;\n    delete process.env.yamlValue;\n  });\n\n  grunt.registerTask('writeEnvdir', function() {\n    grunt.file.mkdir('.envdir/bar');\n    grunt.file.write('.envdir/ENVDIR', 'envdir');\n    grunt.file.write('.envdir/BAZ', 'baz');\n    grunt.file.write('.envdir/bar/FOO', 'foo');\n  });\n\n  grunt.registerTask('testEnvdir', function() {\n    assert(!process.env.envdir, 'Should not include src');\n    assert.equal(process.env.ENVDIR, 'envdir', 'value from envdir file should be set');\n    assert.equal(process.env.BAZ, 'baz', 'value from envdir file should be set');\n    assert(!process.env.FOO, 'Should not include subdirectories');\n    delete process.env.ENVDIR;\n    delete process.env.BAR;\n  });\n\n  // Default task.\n  grunt.registerTask('default', [\n    'clean',\n    'jshint',\n    'jscs',\n    'env:testData',\n    'testData',\n    'env:testOptions',\n    'testOptions',\n    'writeDotEnv',\n    'env:testDotEnv',\n    'testDotEnv',\n    'env:testDirectives',\n    'testDirectives',\n    'env:testFunctions',\n    'testFunctions',\n    'writeEnvdir',\n    'env:testEnvdir',\n    'testEnvdir',\n    'clean'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-env/node_modules/grunt-env/lib/utils.js":"var ini = require('ini');\n\nvar types = {\n  json: readJson,\n  yaml: readYaml,\n  ini: readIni,\n  env: readIni,\n  default: readFile // default for unsupported format or no extension file\n};\n\nvar extensionPattern = /\\.([^\\.]+)$/i;\n\nfunction readFile(grunt, file) {\n  return grunt.file.read(file);\n}\n\nfunction readJson(grunt, file) {\n  try {\n    return grunt.file.readJSON(file);\n  } catch (e) {\n    return;\n  }\n}\n\nfunction readYaml(grunt, file) {\n  try {\n    return grunt.file.readYAML(file);\n  } catch (e) {\n    return;\n  }\n}\n\nfunction readIni(grunt, file) {\n  try {\n    return ini.parse(grunt.file.read(file));\n  } catch (e) {\n    return;\n  }\n}\n\nmodule.exports = {\n  // Export a single parse function that call the proper parsing function\n  // Grunt is used here as it as already some parsing functions\n  parse: function(grunt, file) {\n    var match = file.match(extensionPattern);\n    var type = match ? match[1] : 'default'; // default to ini format\n\n    try {\n      var parseFn = types[type] || types.default;\n      return parseFn(grunt, file) || {};\n    } catch (e) {\n      return;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-env/node_modules/grunt-env/tasks/env.js":"/*\n * grunt-env\n * https://github.com/onehealth/grunt-env\n *\n * Copyright (c) 2012 OneHealth Solutions, inc\n * Licensed under the Apache 2.0 license.\n */\n\n'use strict';\n\nvar _ = require('lodash');\nvar path = require('path');\nvar utils = require('../lib/utils');\n\nmodule.exports = function(grunt) {\n  var parse = function(file) {\n    // pass grunt reference to parse\n    return utils.parse(grunt, file);\n  };\n\n  grunt.registerMultiTask('env', 'Specify an ENV configuration for future tasks in the chain', function() {\n\n    var data = _.clone(this.data);\n    delete data.src;\n    processDirectives(data);\n\n    var options = this.options();\n\n    if (this.files.length) {\n      if (options.envdir) {\n        var d = _.zipObject(this.files[0].src.map(function(file) {\n          if (grunt.file.isFile(file)) {\n            return [path.basename(file), parse(file)];\n          }\n        }));\n        processDirectives(d);\n      } else {\n        this.files[0].src.forEach(function(file) {\n          processDirectives(parse(file));\n        });\n      }\n    }\n\n    delete options.envdir;\n    processDirectives(options);\n  });\n\n  function processDirectives(options) {\n\n    var dispatch = {\n      add : add,\n      replace : replace,\n      unshift : arrayLike.bind({}, 'unshift'),\n      push : arrayLike.bind({}, 'push'),\n      concat : arrayLike.bind({}, 'push')\n    };\n\n    _.forEach(options, function(optionData, option) {\n      if (option === 'options') {\n        return;\n      }\n      var fn = dispatch[option];\n      if (fn && typeof optionData === 'object') {\n        _.forEach(optionData, fn);\n      } else {\n        var data = {};\n        data[option] = typeof optionData === 'function' ? optionData() : optionData;\n        _.extend(process.env, data);\n      }\n    });\n  }\n\n  function add(value, key) {\n    if (process.env[key]) {\n      return grunt.verbose.writeln(key + ' already exists, leaving unchanged.');\n    }\n\n    var data = {};\n    data[key] = value;\n    _.extend(process.env, data);\n  }\n\n  function replace(value, key) {\n    if (!process.env[key]) {\n      return grunt.verbose.writeln(key + ' doesn\\'t exist, refusing to replace.');\n    }\n    process.env[key] = value;\n  }\n\n  function arrayLike(method, value, key) {\n    process.env[key] = process.env[key] || '';\n    var delimiter = value ? value.delimiter || '' : '';\n\n    if (typeof value === 'object') {\n      value = value.value;\n    }\n\n    if (method === 'unshift') {\n      process.env[key] = value + delimiter + process.env[key];\n    } else if (method === 'push') {\n      process.env[key] += delimiter + value;\n    }\n  }\n};\n"}